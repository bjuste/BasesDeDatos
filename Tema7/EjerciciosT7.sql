CREATE OR REPLACE TYPE TCODPOSTAL AS OBJECT(
    LOCALIDAD NUMBER(3),
    PROVINCIA NUMBER(2),
    MEMBER PROCEDURE inicializarCodPostal(LOCALIDAD NUMBER, PROVINCIA NUMBER)
)NOT FINAL;

CREATE OR REPLACE TYPE TDOMICILIO AS OBJECT(
    TIPODEVIA VARCHAR2(50),
    NOMBREVIA VARCHAR2(100),
    NUMERO NUMBER,
    RESTODOMICILIO VARCHAR2(100),
    MEMBER PROCEDURE inicializarDomicilio(TIPODEVIA VARCHAR2, NOMBREVIA VARCHAR2, NUMERO NUMBER, RESTODOMICILIO VARCHAR2)
);

CREATE OR REPLACE TYPE TNOMBRECOMPLETO AS OBJECT(
    NOMBRE VARCHAR2(50),
    PRAPELLIDO VARCHAR2(50),
    SGAPELLIDO VARCHAR2(50),
    MEMBER PROCEDURE inicializarNombreCompleto(NOMBRE VARCHAR2, PRAPELLIDO VARCHAR2, SGAPELLIDO VARCHAR2)
);

CREATE OR REPLACE TYPE TDATOSPERSONALES AS OBJECT (
    CODIGO_DP NUMBER(3),
    NOMBRE_COMPLETO TNOMBRECOMPLETO,
    DOMICILIO TDOMICILIO,
    CODIGO_POSTAL TCODPOSTAL,
    FECHA_NACIMIENTO DATE,
    MEMBER PROCEDURE inicializarDatosPersonales(CODIGO_DP NUMBER, NOMBRE_COMPLETO TNOMBRECOMPLETO, DOMICILIO TDOMICILIO, CODIGO_POSTAL TCODPOSTAL, FECHA_NACIMIENTO DATE)
);

DROP TYPE TDATOSPERSONALES;

CREATE OR REPLACE TYPE BODY TCODPOSTAL AS
    MEMBER PROCEDURE inicializarCodPostal(LOCALIDAD NUMBER, PROVINCIA NUMBER) IS
    BEGIN
        SELF.LOCALIDAD := LOCALIDAD;
        SELF.PROVINCIA := PROVINCIA;
    END;
END;

CREATE OR REPLACE TYPE BODY TDOMICILIO AS
    MEMBER PROCEDURE inicializarDomicilio(TIPODEVIA VARCHAR2, NOMBREVIA VARCHAR2, NUMERO NUMBER, RESTODOMICILIO VARCHAR2) IS
    BEGIN
        SELF.TIPODEVIA := TIPODEVIA;
        SELF.NOMBREVIA := NOMBREVIA;
        SELF.NUMERO := NUMERO;
        SELF.RESTODOMICILIO := RESTODOMICILIO;
    END;
END;

CREATE OR REPLACE TYPE BODY TNOMBRECOMPLETO AS
    MEMBER PROCEDURE inicializarNombreCompleto(NOMBRE VARCHAR2, PRAPELLIDO VARCHAR2, SGAPELLIDO VARCHAR2) IS
    BEGIN
        SELF.NOMBRE := NOMBRE;
        SELF.PRAPELLIDO := PRAPELLIDO;
        SELF.SGAPELLIDO := SGAPELLIDO;
    END;
END;

CREATE OR REPLACE TYPE BODY TDATOSPERSONALES AS
    MEMBER PROCEDURE inicializarDatosPersonales(CODIGO_DP NUMBER, NOMBRE_COMPLETO TNOMBRECOMPLETO, DOMICILIO TDOMICILIO, CODIGO_POSTAL TCODPOSTAL, FECHA_NACIMIENTO DATE) IS
    BEGIN
        SELF.CODIGO_DP := CODIGO_DP;
        SELF.NOMBRE_COMPLETO := NOMBRE_COMPLETO;
        SELF.DOMICILIO := DOMICILIO;
        SELF.CODIGO_POSTAL := CODIGO_POSTAL;
        SELF.FECHA_NACIMIENTO := FECHA_NACIMIENTO;
    END;
END;

/*PROCEDIMIENTO PARA EL EJERCICIO 3*/

SET SERVEROUTPUT ON;
DECLARE 
    codUno TCODPOSTAL := TCODPOSTAL(012,47);
BEGIN
    DBMS_OUTPUT.PUT_LINE(codUno.LOCALIDAD);
    codUno.inicializarCodPostal(320,47);
    DBMS_OUTPUT.PUT_LINE(codUno.LOCALIDAD);
END;

DECLARE
    domUno TDOMICILIO := TDOMICILIO('Calle','Pajaros',2,'Valladolid');
BEGIN
    DBMS_OUTPUT.PUT_LINE(domUno.TIPODEVIA);
    domUno.inicializarDomicilio('Via','Hoteles',2,'Valladolid');
    DBMS_OUTPUT.PUT_LINE(domUno.TIPODEVIA);
END;

DECLARE
    nomUno TNOMBRECOMPLETO := TNOMBRECOMPLETO('BRUNO', 'JUSTE', 'PEREZ');
BEGIN
    DBMS_OUTPUT.PUT_LINE(nomUno.NOMBRE);
    nomUno.inicializarNombreCompleto('ALEJANDRO', 'LLEDO', 'LOPEZ');
    DBMS_OUTPUT.PUT_LINE(nomUno.NOMBRE);
END;

DECLARE
    datUno TDATOSPERSONALES := TDATOSPERSONALES(NULL, NULL, NULL, NULL, NULL);
    codUno TCODPOSTAL := TCODPOSTAL(012,47);
    domUno TDOMICILIO := TDOMICILIO('Calle','Pajaros',2,'Valladolid');
    nomUno TNOMBRECOMPLETO := TNOMBRECOMPLETO('BRUNO', 'JUSTE', 'PEREZ');
BEGIN
    DBMS_OUTPUT.PUT_LINE(datUno.CODIGO_DP);
    DBMS_OUTPUT.PUT_LINE(datUno.NOMBRE_COMPLETO.NOMBRE);
    DBMS_OUTPUT.PUT_LINE(datUno.DOMICILIO.TIPODEVIA);
    DBMS_OUTPUT.PUT_LINE(datUno.CODIGO_POSTAL.LOCALIDAD);
    DBMS_OUTPUT.PUT_LINE(datUno.FECHA_NACIMIENTO);
    
    datUno.inicializarDatosPersonales(1, nomUno, domUno, codUno, '18/04/1991');
    
    DBMS_OUTPUT.PUT_LINE(datUno.CODIGO_DP);
    DBMS_OUTPUT.PUT_LINE(datUno.NOMBRE_COMPLETO.NOMBRE);
    DBMS_OUTPUT.PUT_LINE(datUno.DOMICILIO.TIPODEVIA);
    DBMS_OUTPUT.PUT_LINE(datUno.CODIGO_POSTAL.LOCALIDAD);
    DBMS_OUTPUT.PUT_LINE(datUno.FECHA_NACIMIENTO);
END;

/*Ejemplo*/
SET SERVEROUTPUT ON;
CREATE TYPE persona AS OBJECT (
    nombre VARCHAR2(20),
    apellidos VARCHAR2(30)
)NOT FINAL;

CREATE TYPE usuariopersona UNDER persona(
    login VARCHAR2(30),
    f_ingreso DATE,
    credito NUMBER
);
DECLARE
    ul usuariopersona;
BEGIN
    ul := NEW usuariopersona('Pedro', 'Picapiedra', 'PPica', '01/01/2002', 150);
    dbms_output.put_line(ul.nombre);
END;

/*EJERCICIO 4*/

CREATE OR REPLACE TYPE persona AS OBJECT(
    dni VARCHAR2(9),
    nombre VARCHAR2(30),
    apellidos VARCHAR2(30),
    f_nacimiento DATE,
    MEMBER FUNCTION muestraEdad RETURN NUMBER
);
CREATE OR REPLACE TYPE BODY persona AS
MEMBER FUNCTION muestraEdad RETURN NUMBER IS
        edad NUMBER;
    BEGIN
        edad := EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM self.f_nacimiento);
        RETURN edad;
    END muestraEdad;
END;

/*EJERCICIO 5*/

DROP TYPE BODY persona;
DROP TYPE persona;
ALTER TYPE PERSONA COMPILE;

CREATE OR REPLACE TYPE persona AS OBJECT(
    dni VARCHAR2(9),
    nombre VARCHAR2(30),
    apellidos VARCHAR2(30),
    f_nacimiento DATE,
    MEMBER FUNCTION muestraEdad RETURN NUMBER,
    CONSTRUCTOR FUNCTION persona(dni VARCHAR2, nombre VARCHAR2, apellidos VARCHAR2, f_nacimiento DATE)
    RETURN SELF AS RESULT
);

CREATE OR REPLACE TYPE BODY persona AS
    CONSTRUCTOR FUNCTION persona (
        dni VARCHAR2,
        nombre VARCHAR2,
        apellidos VARCHAR2,
        f_nacimiento DATE
    ) RETURN SELF AS RESULT IS
    BEGIN
        SELF.dni := dni;
        SELF.nombre := nombre;
        SELF.apellidos := apellidos;
        SELF.f_nacimiento := f_nacimiento;
        RETURN;
    END;
    
    MEMBER FUNCTION muestraEdad RETURN NUMBER IS
        edad NUMBER;
    BEGIN
        edad := EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM self.f_nacimiento);
        RETURN edad;
    END muestraEdad;
END;

DECLARE
    trabajador persona;
    edad NUMBER;
BEGIN
    trabajador := persona('123456789', 'Juan', 'Pérez', TO_DATE('1985-05-15', 'YYYY-MM-DD'));

    edad := trabajador.muestraEdad;

    DBMS_OUTPUT.PUT_LINE('Nombre: ' || trabajador.nombre);
    DBMS_OUTPUT.PUT_LINE('Edad: ' || edad);
END;

/*EJERCICIO 6*/

CREATE OR REPLACE TYPE TDATOSPERSONALES AS OBJECT (
    CODIGO_DP NUMBER(3),
    NOMBRE_COMPLETO TNOMBRECOMPLETO,
    DOMICILIO TDOMICILIO,
    CODIGO_POSTAL TCODPOSTAL,
    FECHA_NACIMIENTO DATE,
    MEMBER PROCEDURE inicializarDatosPersonales(CODIGO_DP NUMBER, NOMBRE_COMPLETO TNOMBRECOMPLETO, DOMICILIO TDOMICILIO, CODIGO_POSTAL TCODPOSTAL, FECHA_NACIMIENTO DATE)
)NOT FINAL;

CREATE OR REPLACE TYPE BODY TDATOSPERSONALES AS
    MEMBER PROCEDURE inicializarDatosPersonales(CODIGO_DP NUMBER, NOMBRE_COMPLETO TNOMBRECOMPLETO, DOMICILIO TDOMICILIO, CODIGO_POSTAL TCODPOSTAL, FECHA_NACIMIENTO DATE) IS
    BEGIN
        SELF.CODIGO_DP := CODIGO_DP;
        SELF.NOMBRE_COMPLETO := NOMBRE_COMPLETO;
        SELF.DOMICILIO := DOMICILIO;
        SELF.CODIGO_POSTAL := CODIGO_POSTAL;
        SELF.FECHA_NACIMIENTO := FECHA_NACIMIENTO;
    END;
END;

CREATE TYPE profesor UNDER tdatospersonales (
    f_incorporacion DATE
);

CREATE TYPE alumno UNDER tDatosPersonales (
    calificaciones evaluaciones
);

CREATE TYPE evaluaciones UNDER tDatosPersonales(
    evaluacionUno NUMBER,
    evaluacionDos NUMBER,
    evaluacionTres NUMBER,
    evaluacionCuatro NUMBER
);

/*Ejercicio 7*/

DECLARE
    profesorUno profesor;
    alumnoUno alumno;
BEGIN
    profesorUno := profesor(
        101, TNOMBRECOMPLETO('Dolores', 'SANCHEZ', 'GOMEZ'), TDOMICILIO('Plaza', 'España', 103, '1oA'), TCODPOSTAL(28003, 28), DATE '2021-09-01'
    );

    alumnoUno := alumno(
        201, TNOMBRECOMPLETO('Luis', 'MARIN', 'SOL'), TDOMICILIO('Calle', 'Laguna', 12, ''), TCODPOSTAL(28660, 28), DATE '2000-01-01', EVALUACIONES(4, 4, 5, 7) 
    );

    DBMS_OUTPUT.PUT_LINE('Profesor: ');
    DBMS_OUTPUT.PUT_LINE('Nombre: ' || profesorUno.NOMBRE_COMPLETO.NOMBRE || ' ' || profesorUno.NOMBRE_COMPLETO.PRAPELLIDO || ' ' || profesorUno.NOMBRE_COMPLETO.SGAPELLIDO);
    DBMS_OUTPUT.PUT_LINE('Fecha de Incorporación: ' || TO_CHAR(profesorUno.F_INCORPORACION, 'DD/MM/YYYY'));

    DBMS_OUTPUT.PUT_LINE('Alumno: ');
    DBMS_OUTPUT.PUT_LINE('Nombre: ' || alumnoUno.NOMBRE_COMPLETO.NOMBRE || ' ' || alumno_obj.NOMBRE_COMPLETO.PRAPELLIDO || ' ' || alumnoUno.NOMBRE_COMPLETO.SGAPELLIDO);
    DBMS_OUTPUT.PUT_LINE('Calificaciones:');
    DBMS_OUTPUT.PUT_LINE('Evaluación 1: ' || alumnoUno.CALIFICACIONES.EVALUACIONUNO);
    DBMS_OUTPUT.PUT_LINE('Evaluación 2: ' || alumnoUno.CALIFICACIONES.EVALUACIONDOS);
    DBMS_OUTPUT.PUT_LINE('Evaluación 3: ' || alumnoUno.CALIFICACIONES.EVALUACIONTRES);
    DBMS_OUTPUT.PUT_LINE('Evaluación 4: ' || alumnoUno.CALIFICACIONES.EVALUACIONCUATRO);
END;

